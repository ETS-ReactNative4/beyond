define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.BuilderApplication = BuilderApplication;
  _exports.ReactiveModel = _exports.ModuleBundleBuilder = void 0;
  const {
    beyond
  } = globalThis;
  const bundle = beyond.bundles.obtain('@beyond-js/dashboard-lib/models/js', false, {});
  const {
    container
  } = bundle;
  const module = container.is === 'module' ? container : void 0;

  const __pkg = bundle.package();
  /***********
  JS PROCESSOR
  ***********/

  /***********************
  FILE: _reactive-model.js
  ***********************/


  class ReactiveModel {
    _ready;

    get ready() {
      return this._ready;
    }

    _fetching;

    get fetching() {
      return this._fetching;
    }

    set fetching(value) {
      if (value === this._fetching) return;
      this._fetching = value;
      this.triggerEvent();
    }

    _fetched;

    get fetched() {
      return this._fetched;
    }

    _processing;

    get processing() {
      return this._processing;
    }

    _processed;

    get processed() {
      return this._processed;
    }

    _loaded;

    get loaded() {
      return this._loaded;
    }

    constructor() {
      this._events = new Events({
        bind: this
      });
      this.triggerEvent = this.triggerEvent.bind(this);
      this._set = this._set.bind(this);
    }

    triggerEvent(event = 'change') {
      this._events.trigger(event);
    }
    /**
     * set value in a private property
     * @param property
     * @param value
     */


    _set(property, value) {
      let props = {};
      if (property && value) props[property] = value;else props = property;
      let updated = false;

      for (const prop in props) {
        const key = `_${prop}`;

        if (this.hasOwnProperty(key)) {
          this[key] = props[prop];
          updated = true;
        }
      }

      if (updated) this.triggerEvent();
    }

    getProperties() {
      const props = {};
      Object.keys(this).forEach(property => props[property.replace('_', '')] = this[property]);
      return props;
    }

  }
  /***************************************
  FILE: builder\application\application.js
  ***************************************/


  _exports.ReactiveModel = ReactiveModel;

  function BuilderApplication() {
    const base = new BaseApplication(this);
    new CreateApplication(this, base);
    new ApplicationPort(this, base);
  }
  /********************************
  FILE: builder\application\base.js
  ********************************/


  function BaseApplication(parent) {
    const events = new Events({
      bind: parent
    });

    this.triggerChange = () => events.trigger('change');

    let processing;
    Object.defineProperty(this, 'processing', {
      get: () => !!processing,
      set: value => processing = value
    });
    Object.defineProperty(parent, 'processing', {
      get: () => !!processing
    });
    let processed;
    Object.defineProperty(this, 'processed', {
      get: () => !!processed,
      set: value => processed = value
    });
    Object.defineProperty(parent, 'processed', {
      get: () => !!processed
    });
    let error;
    Object.defineProperty(this, 'error', {
      get: () => error,
      set: value => error = value
    });
    Object.defineProperty(parent, 'error', {
      get: () => error
    });
    let created;
    Object.defineProperty(this, 'created', {
      get: () => !!created,
      set: value => created = value
    });
    Object.defineProperty(parent, 'created', {
      get: () => !!created
    });
    let name;
    Object.defineProperty(parent, 'name', {
      get: () => name,
      set: value => {
        if (name === value) return;
        name = value;
      }
    });
    let title;
    Object.defineProperty(parent, 'title', {
      get: () => title,
      set: value => {
        if (title === value) return;
        title = value;
      }
    });
    let description;
    Object.defineProperty(parent, 'description', {
      get: () => description,
      set: value => {
        if (description === value) return;
        description = value;
      }
    });
    let modules;
    Object.defineProperty(parent, 'modules', {
      get: () => modules,
      set: value => {
        if (modules === value) return;
        modules = value;
      }
    });
    /**
     * Application id
     * The id is generated by beyond when the application is created.
     */

    let id;
    Object.defineProperty(this, 'id', {
      get: () => id,
      set: value => id = value
    });
    Object.defineProperty(parent, 'id', {
      get: () => id
    });
    let identifier, editedIdentifier;
    Object.defineProperty(this, 'identifier', {
      get: () => {},
      set: value => {
        if (value !== identifier) identifier === value;
        editedIdentifier = true;
      }
    });
    let version = 1;
    Object.defineProperty(parent, 'version', {
      get: () => version,
      set: value => {
        if (version === value) return;
        version = value;
      }
    });
    let type = 'empty';
    Object.defineProperty(parent, 'type', {
      get: () => type,
      set: value => {
        if (type === value) return;
        type = value;
      }
    });
    let validPort;
    Object.defineProperty(parent, 'validPort', {
      get: () => validPort,
      set: value => {
        if (value === validPort) return;
        validPort = value;
        events.trigger('change');
      }
    });
    let port;
    Object.defineProperty(this, 'port', {
      get: () => !!port,
      set: value => {
        if (port === value) return;
        port = !isNaN(value) ? parseInt(value) : value;
        validPort = undefined;
      }
    });
    Object.defineProperty(parent, 'port', {
      get: () => port,
      set: value => {
        if (port === value) return;
        port = !isNaN(value) ? parseInt(value) : value;
        validPort = undefined;
      }
    });
    Object.defineProperty(parent, 'getters', {
      get: () => {
        return {
          id: id,
          port: port,
          type: type,
          name: name,
          title: title,
          version: version,
          modules: modules,
          created: created,
          processed: processed,
          processing: processing,
          description: description
        };
      }
    });
  }
  /**********************************
  FILE: builder\application\create.js
  **********************************/


  function CreateApplication(parent, base) {
    'use strict';

    async function create() {
      if (!parent.name) throw new Error('Name is required');
      base.processing = true;
      base.processed = false;
      base.triggerChange();

      try {
        const response = await module.execute('builder/application/create', parent.getters);

        if (!response?.status) {
          base.error = response.error;
          return;
        }

        base.created = true;
        base.id = response.data.id;
      } catch (error) {
        base.created = false;
      } finally {
        base.processed = true;
        base.processing = false;
        base.triggerChange();
      }
    }

    parent.create = create;
  }
  /********************************
  FILE: builder\application\port.js
  ********************************/


  function ApplicationPort(parent, base) {
    'use strict';

    async function check(port) {
      if (!port) throw new Error('port to check is required');
      base.processing = true;
      base.processed = false;
      base.triggerChange();

      try {
        const response = await module.execute('builder/application/checkPort', {
          port: port
        });
        base.processing = false;

        if (!response.valid) {
          base.triggerChange();
          return;
        }

        base.port = port;
        base.validPort = true;
        base.triggerChange();
        return response;
      } catch (error) {
        base.processing = false;
        base.validPort = false;
        base.processed = true;
        base.triggerChange();
      }
    }

    parent.checkPort = check;
  }
  /************************************
  FILE: builder\bundle\module-bundle.js
  ************************************/

  /**
   * Manager to create bundles
   */


  class ModuleBundleBuilder extends ReactiveModel {
    _bundle;
    _applicationId;
    _PROCESSORS = ['scss', 'less'];
    _BUNDLES = ['layout', 'code', 'page'];
    _TEMPLATES = Object.freeze({
      page: {
        'id': 'page',
        'bundle': 'page'
      },
      server_page: {
        'id': 'server_page',
        'bundle': 'page'
      },
      mobile_login: {
        'id': 'mobile_login',
        'bundle': 'page'
      }
    });

    get applicationId() {
      return this._applicationId;
    }

    get PROCESSORS() {
      return this._PROCESSORS;
    }

    get BUNDLES() {
      return this._BUNDLES;
    }

    get type() {
      return this._bundle.template ?? this._bundle.type;
    }

    _origin;

    get origin() {
      return this._origin;
    }

    set origin(value) {
      if (value === this._origin) return;
      this._origin = value;
      this.triggerEvent();
    }

    setTemplate(name) {
      if (!this._TEMPLATES.hasOwnProperty(name)) {
        console.warn('the template does not exists');
      }

      const template = this._TEMPLATES[name];
      this._bundle.type = template.bundle;
      this._bundle.template = template.id;
    }

    get bundle() {
      return this._bundle;
    }

    constructor(applicationId) {
      super(applicationId);
      this._applicationId = applicationId;
      this._bundle = new ModuleBundle(this._applicationId);

      this._bundle.bind('change', this.triggerEvent);
    }

    getStructure(bundle) {
      return Structures[bundle];
    }

    setType(type) {
      this._bundle.type = type;
    }

    cleanType() {
      this._bundle.type = undefined;
      this._bundle.template = undefined;
    }

  }
  /*****************************
  FILE: builder\bundle\module.js
  *****************************/

  /**
   * Represents a module that could be create and only has a bundle
   */


  _exports.ModuleBundleBuilder = ModuleBundleBuilder;

  class ModuleBundle extends ReactiveModel {
    _id;

    get id() {
      return `${this.moduleId}//${this._type}`;
    }

    get moduleId() {
      return `application//${this._applicationId}//${this.name.replace(/ /g, '-')}`;
    }

    _type;

    get type() {
      return this._type;
    }

    _name;

    get name() {
      return this._name ?? '';
    }

    _error;

    get error() {
      return this._error;
    }

    _vdir;

    get vdir() {
      return this._vdir ?? 0;
    }

    _structure;

    get structure() {
      return this._structure;
    }

    _txt;
    _route;
    _author;
    _developer;
    _title;
    _description;
    _styles;
    _fields;
    _layoutId;
    _applicationId;
    _server = false;
    _multilanguage = false;
    _processors = new Map();
    /**
     * Define if the module to create is a predefined template.
     * @private
     */

    _template;

    get valid() {
      const structure = this._structure;
      if (!structure.required) return true;
      console.log('getter valid', structure.required);
      const keepEmpty = structure.required.filter(property => !this[`_${property}`]);
      console.log('getter valid keepEmpty', this[`_name`], this[`name`], this[`route`], this[`_route`]);
      console.log('getter valid keepEmpty', keepEmpty, !keepEmpty.length);
      return !keepEmpty.length;
    }

    constructor(applicationId) {
      super();
      this._applicationId = applicationId;
    }

    set type(type) {
      if (type === this._type) return;
      this._type = type;
      if (!this._type) return this.triggerEvent();
      this._structure = Structures[this._type];
      this._fields = Structures.module.fields.concat(this._structure.fields);
      this.triggerEvent();
    }

    get template() {
      return this._template;
    }

    set template(template) {
      if (template === this._template) return;
      this._template = template;
      this.triggerEvent();
    }

    set(property, value) {
      console.log('SET MODEL ', property, value);

      this._set(property, value);
    }

    setMultilanguage(value) {
      if (value === this._multilanguage) return;
      this._multilanguage = value;
      this.triggerEvent();
    }

    addProcessor(value) {
      if (this._processors.has(value)) return;

      this._processors.set(value, true);

      this.triggerEvent();
    }

    removeProcessor(value) {
      if (!this._processors.has(value)) return;

      this._processors.delete(value);

      this.triggerEvent();
    }

    async publish() {
      const params = {};

      this._fields.forEach(field => {
        const key = `_${field}`;
        if (this[key]) params[field] = this[key];
      });

      if (this._type === 'layout') params.id = params.name;

      try {
        this._set({
          fetching: true,
          error: undefined
        });

        params.applicationId = this._applicationId;
        params.bundle = this._type;
        params.processors = Array.from(this._processors.keys());
        const action = params.template ? '/builder/module/clone' : '/builder/module/create';
        console.log(action, params);
        const response = await module.execute(action, params);

        if (response.error) {
          this._set({
            error: response.error
          });

          return response;
        }

        this._set({
          fetching: false
        });

        return true;
      } catch (exc) {
        console.error(1, exc);
      }
    }

  }
  /********************************
  FILE: builder\bundle\processor.js
  ********************************/


  class BundleProcessor extends ReactiveModel {
    constructor(type) {
      super(type);
    }

  }
  /*********************************
  FILE: builder\bundle\structures.js
  *********************************/


  const Structures = {
    module: {
      fields: ['id', 'name', 'title', 'description', 'developer', 'author', 'template', 'styles', 'server', 'multilanguage']
    },
    page: {
      fields: ['vdir', 'route', 'layoutId'],
      required: ['route', 'name'],
      processors: ['ts', 'jsx'],
      dependencies: ['layout']
    },
    code: {
      required: ['name', 'developer'],
      processors: ['ts', 'jsx']
    },
    layout: {
      required: ['name'],
      processors: ['ts', 'jsx']
    },
    ts: {
      required: ['name']
    },
    js: {
      required: ['name']
    }
  };
});