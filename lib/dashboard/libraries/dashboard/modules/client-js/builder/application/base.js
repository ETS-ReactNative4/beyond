function BaseApplication(parent) {
    const events = new Events({bind: parent});
    this.triggerChange = () => events.trigger('change');

    let processing;
    Object.defineProperty(this, 'processing', {
        get: () => !!processing,
        set: value => processing = value
    });
    Object.defineProperty(parent, 'processing', {get: () => !!processing});

    let processed;
    Object.defineProperty(this, 'processed', {
        get: () => !!processed,
        set: value => processed = value
    });
    Object.defineProperty(parent, 'processed', {get: () => !!processed});

    let error;
    Object.defineProperty(this, 'error', {
        get: () => error,
        set: value => error = value
    });
    Object.defineProperty(parent, 'error', {get: () => error});

    let created;
    Object.defineProperty(this, 'created', {
        get: () => !!created,
        set: value => created = value
    });
    Object.defineProperty(parent, 'created', {get: () => !!created});

    let name;
    Object.defineProperty(parent, 'name', {
        get: () => name,
        set: value => {
            if (name === value) return;
            name = value;
        }
    });

    let title;
    Object.defineProperty(parent, 'title', {
        get: () => title,
        set: value => {
            if (title === value) return;
            title = value;
        }
    });

    let description;
    Object.defineProperty(parent, 'description', {
        get: () => description,
        set: value => {
            if (description === value) return;
            description = value;
        }
    });

    let modules;
    Object.defineProperty(parent, 'modules', {
        get: () => modules,
        set: value => {
            if (modules === value) return;
            modules = value;
        }
    });

    /**
     * Application id
     * The id is generated by beyond when the application is created.
     */
    let id;
    Object.defineProperty(this, 'id', {get: () => id, set: value => id = value});
    Object.defineProperty(parent, 'id', {get: () => id});

    let identifier, editedIdentifier;
    Object.defineProperty(this, 'identifier', {
        get: () => {

        },
        set: (value) => {
            if (value !== identifier) identifier === value;
            editedIdentifier = true;
        }
    })
    let version = 1;
    Object.defineProperty(parent, 'version', {
        get: () => version,
        set: value => {
            if (version === value) return;
            version = value;
        }
    });
    let type = 'empty';
    Object.defineProperty(parent, 'type', {
        get: () => type,
        set: value => {
            if (type === value) return;
            type = value;
        }
    });

    let validPort;
    Object.defineProperty(parent, 'validPort', {
        get: () => validPort,
        set: (value) => {
            if (value === validPort) return;
            validPort = value;
            events.trigger('change');
        }
    });

    let port;
    Object.defineProperty(this, 'port', {
        get: () => !!port,
        set: value => {
            if (port === value) return;
            port = !isNaN(value) ? parseInt(value) : value;
            validPort = undefined;
        }
    });
    Object.defineProperty(parent, 'port', {
        get: () => port,
        set: value => {
            if (port === value) return;
            port = !isNaN(value) ? parseInt(value) : value;
            validPort = undefined;
        }
    });

    Object.defineProperty(parent, 'getters', {
        get: () => {
            return {
                id: id,
                port: port,
                type: type,
                name: name,
                title: title,
                version: version,
                modules: modules,
                created: created,
                processed: processed,
                processing: processing,
                description: description
            };
        }
    });

}